<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
angle=180
randomize()

//3d setup
d3d_start()
d3d_set_culling(true)
d3d_set_perspective(true)
d3d_set_lighting(true)


if false
{
//old random generator
tiles = 16

//Performance variables
precision=round(80/tiles)
//Precision=Number of planes per piece.
renderdistance=30
//Renderdistance=Number of pieces on 1 row in the z axis
//Total amount of triangles=(renderdistance*8*precision*2)


//Setup initial walls
//Create wall piece model. 1/8 of the wall
piece_model=d3d_model_create()

var modelwidth=200
var col=c_orange
//Precision=how round the wall will appear

//Define wall pieces
for (i=0;i&lt;tiles;i++)
  {
  wpieces[i]=ds_list_create()
  for (j=0;j&lt;renderdistance;j++)
    {
    if random(10)&lt;6
      ds_list_add(wpieces[i],true)
    else
      ds_list_add(wpieces[i],false)
    }
  }
for (i=0;i&lt;renderdistance;i++)
  {
  wlayers[i]=d3d_model_create()
  }
//Create layers
var x1
var x2
var y1
var y2
var count
for (i=0;i&lt;renderdistance;i++)
  {
  //Create layer
  for (j=0;j&lt;tiles;j++)
    {
    count=0
    //Single piece
    for (k=-360/tiles/2+j/tiles*360;k&lt;360/tiles/2+j/tiles*360;k+=360/tiles/precision)
      {
      if ds_list_find_value(wpieces[j],i)
        {
        //Get x,y coordinates for part of piece
        var x1=sin(degtorad(k))*modelwidth
        var x2=sin(degtorad(k+360/tiles/precision))*modelwidth
        var y1=cos(degtorad(k))*modelwidth
        var y2=cos(degtorad(k+360/tiles/precision))*modelwidth
        //Draw primitves
        d3d_model_primitive_begin(wlayers[i], pr_trianglelist );
        
        //Top Venstre
        d3d_model_vertex_normal_texture(wlayers[i],  x2,y2,modelwidth/2, 0,1,0,(1-(count+1)/precision)/4,0.5);
        //Top Højre
        d3d_model_vertex_normal_texture(wlayers[i],  x1,y1,modelwidth/2, 0,1,0,(1-(count)/precision)/4,0.5);
        //Bot Venstre
        d3d_model_vertex_normal_texture(wlayers[i],  x2,y2,-modelwidth/2, 0,1,0,(1-(count+1)/precision)/4,0.75);
        
        //Bot Venstre
        d3d_model_vertex_normal_texture(wlayers[i],  x2,y2,-modelwidth/2, 0,1,0,(1-(1+count)/precision)/4,0.75);
        //Bot Højre
        d3d_model_vertex_normal_texture(wlayers[i],  x1,y1,-modelwidth/2, 0,1,0,(1-(count)/precision)/4,0.75);
        //Top Højre
        d3d_model_vertex_normal_texture(wlayers[i],  x1,y1,modelwidth/2, 0,1,0,(1-(count)/precision)/4,0.5);
        
        d3d_model_primitive_end(wlayers[i]);
        }
      count++  
      }
    
    }
  }

}
else
{
init_tiles()
load_level("savefilemars.ini")
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add light
d3d_light_define_direction(0,0,0,1,c_white)
d3d_light_enable(0,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spaceview()
//3d lightning
var intensity=255
d3d_light_define_ambient(make_colour_rgb(intensity,intensity,intensity))
d3d_set_hidden(true)
d3d_set_culling(false)
//draw wall
//Create wall pieces
var tex=sprite_get_texture(orange_path,-1)
shader_set(zaxism)
for (i=renderdistance-1;i&gt;=0;i--)
  {
  shader_set_uniform_f(shader_get_uniform(zaxism,"depthz"),i*200-600-obj_spaceship.z)
  d3d_model_draw(wlayers[i],room_width/2,room_height/2,i*200-600,tex);
  }
shader_reset()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
