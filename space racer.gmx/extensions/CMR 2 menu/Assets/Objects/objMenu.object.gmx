<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup menus and variables

    text = 'gamemaker:studio';
    offset = 0;
    offsetDot[0] = 0;
    offsetDot[1] = 0.73;
    offsetDot[2] = 0.12;
    offsetSin = 0;
    
    m[0] = 'rally';
    m[1] = 'arcade';
    m[2] = 'options';
    m[3] = 'credits';
    m[4] = 'quit';
    
    p[0] = pathRally;
    p[1] = pathArcade;
    p[2] = pathAudio;
    p[3] = pathCredits;
    p[4] = pathExit;
    lastPath = -1;
    
    menu = 0;
    lockdown = 0;
    lockdownMax = 0;
    lockdownDivider = 0;
    
    timer = 0;
    
    switch(os_type) {
        case os_windows: case os_macosx: case os_linux: case os_browser:
            is_mobile = false;
            break;
        default:
            is_mobile = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    if lockdown &gt; 0 then lockdown--;
    
    timer+=60/room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    if lockdown = 0 {
        menu = (menu + 1) mod 5;
        lockdown = round(max(2, room_speed / (3 + lockdownDivider)));
        lockdownMax = lockdown;
        lockdownDivider = min(lockdownDivider+1, 30);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    if lockdown = 0 {
        menu = (menu + 5 - 1) mod 5; //prevent to have negative index
        lockdown = round(max(2, room_speed / (3 + lockdownDivider)));
        lockdownMax = -lockdown;
        lockdownDivider = min(lockdownDivider+1, 30);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    if not is_mobile exit;
    
    event_perform(ev_keyrelease, vk_anykey);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    if not is_mobile exit;
    
    event_perform(ev_keypress, vk_anykey);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    if not is_mobile exit;
    
    if (mouse_x &lt; room_width/2) {
        event_perform(ev_keyboard, vk_left);
    } else {
        event_perform(ev_keyboard, vk_right);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    var i,j,_i,w = string_length(text);
    var _amt = 0;
    if (lockdown &gt; 0) _amt = (lockdown/lockdownMax);
    
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_set_font(fontSmall);
    draw_set_alpha(1);
    
    draw_text(25,25,'Main menu');
    draw_set_halign(fa_right);
    draw_text(room_width - 25,25, leading_zeros(timer div 3600)+':'+leading_zeros((timer div 60) mod 60));
    draw_set_halign(fa_left);
    
    offset = (offset + 0.001) mod 1;
    offsetSin = (offsetSin + 0.05) mod 360;
    if menu == 1 {
        offsetDot[0] = (offsetDot[0] + 0.0053 + abs(cos(offsetSin))/100) mod 1;
        offsetDot[1] = (offsetDot[1] + 0.0041 + abs(sin(offsetSin))/80) mod 1;
        offsetDot[2] = (offsetDot[2] + 0.0057 + abs(sin(offsetSin))/70) mod 1;
    } else {
        offsetDot[0] = (offsetDot[0] + 0.0053) mod 1;
    }
    
    if (p[menu] &gt; -1) {
        if lastPath = -1 or _amt = 0 then lastPath = p[menu];
        var c = 0;
        for(i=0; i&lt;100; i+=1) {
            _i = ((i/100) + offset) mod 1;
            
            var _xx , _yy;
            
            _xx = lerp(path_get_x(lastPath,_i), path_get_x(p[menu],_i), 1 - abs(_amt));
            _yy = lerp(path_get_y(lastPath,_i), path_get_y(p[menu],_i), 1 - abs(_amt));
            
            draw_text( _xx, _yy, string_char_at(text, ((c++) mod w) + 1));
        }
        
        if menu &lt; 2 {
            var _dots = 1;
            if (menu = 1) _dots = 3;
            for(j=0; j&lt;_dots; j++) {
                for(i=0; i&lt;10; i++) {
                
                    _i = offsetDot[j] - i/700;
                    
                    if _i &lt; 0 then continue;
                
                    _xx = lerp(path_get_x(lastPath,_i), path_get_x(p[menu],_i), 1 - abs(_amt));
                    _yy = lerp(path_get_y(lastPath,_i), path_get_y(p[menu],_i), 1 - abs(_amt));
                    
                    draw_sprite_ext(sprPointer, 0, _xx, _yy, 1.5-i/20,1.5-i/20,0,c_white,1 - i/10);
                }
            }
        }
        
    } else {
        lastPath = -1;
    }
    
    draw_set_alpha(1);
    draw_text(25, 550, 'Use arrow keys &lt; &gt; to move');
    
    draw_set_font(fontBig);
    
    c = (menu + 3) mod 5;
    var l =  - round(string_width(m[c])) - round(string_width(m[(c+1) mod 5]));
    var offsetMenu = 0;
    if lockdown &gt; 0 then offsetMenu = round(string_width(m[menu]) + 50) * _amt;
    
    while(l &lt; room_width) {
        if l == 100 draw_set_alpha(1) else draw_set_alpha(0.3);
    
        draw_text(l + offsetMenu, 500, m[c mod 5]);
        l += round(string_width(m[c mod 5])) + 50;
        
        if l == 100 draw_set_alpha(1)
        draw_line(l + offsetMenu - 25, 475, l + offsetMenu - 25, 525);
        c++;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    show_message_async('Selected menu: ' + string(menu));
    
    // use switch + case to make actions
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    //lockdown = 0;
    lockdownDivider = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    //lockdown = 0;
    //lockdownMax = 0;
    lockdownDivider = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
